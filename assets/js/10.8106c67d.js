(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{365:function(a,t,e){"use strict";e.r(t);var s=e(42),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"building-antimicrox"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#building-antimicrox"}},[a._v("#")]),a._v(" Building AntiMicroX")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#building-antimicrox"}},[a._v("Building AntiMicroX")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#build-dependencies"}},[a._v("Build Dependencies")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#building-under-linux"}},[a._v("Building Under Linux")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#build-options-for-cmake"}},[a._v("Build Options for CMake")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#universal-options"}},[a._v("Universal Options")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#linux-options"}},[a._v("Linux Options")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#building-deb-package"}},[a._v("Building deb package")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#building-appimage"}},[a._v("Building AppImage")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#building-flatpak"}},[a._v("Building Flatpak")])])])])]),a._v(" "),e("h2",{attrs:{id:"build-dependencies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-dependencies"}},[a._v("#")]),a._v(" Build Dependencies")]),a._v(" "),e("p",[a._v("This program is written in C++ using the "),e("a",{attrs:{href:"https://www.qt.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Qt"),e("OutboundLink")],1),a._v("\nframework. A C++ compiler and a proper C++ build environment will need to be installed on your system prior to building this program. Under Debian and Debian-based distributions like Ubuntu, the easiest way to get a base build environment set up is to install the meta-package "),e("strong",[a._v("build-essential")]),a._v(". The following packages are required to be\ninstalled on your system in order to build this program:")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("g++")]),a._v(" from "),e("code",[a._v("gcc")])]),a._v(" "),e("li",[e("code",[a._v("cmake")])]),a._v(" "),e("li",[e("code",[a._v("extra-cmake-modules")])]),a._v(" "),e("li",[e("code",[a._v("qttools5-dev")]),a._v(" and "),e("code",[a._v("qttools5-dev-tools")]),a._v(" ("),e("code",[a._v("qt5-tools")]),a._v(" on distros based on Arch Linux) (Qt5 support)")]),a._v(" "),e("li",[e("code",[a._v("libsdl2-dev")]),a._v(" ("),e("code",[a._v("sdl2")]),a._v(" on distros based on Arch Linux) (SDL2)")]),a._v(" "),e("li",[e("code",[a._v("libxi-dev")]),a._v(" ("),e("code",[a._v("libxi")]),a._v(" on distros based on Arch Linux) (Optional. Needed to compile with X11 and uinput support)")]),a._v(" "),e("li",[e("code",[a._v("libxtst-dev")]),a._v(" ("),e("code",[a._v("libxtst")]),a._v(" on distros based on Arch Linux) (Optional. Needed to compile with XTest support)")]),a._v(" "),e("li",[e("code",[a._v("libx11-dev")]),a._v(" ("),e("code",[a._v("libx11")]),a._v(" on distros based on Arch Linux) (Needed to compile with Qt5 support)")]),a._v(" "),e("li",[e("code",[a._v("itstool")]),a._v(" (extracts messages from XML files and outputs PO template files, then merges translations from MO files to create translated XML files)")]),a._v(" "),e("li",[e("code",[a._v("gettext")])]),a._v(" "),e("li",[e("code",[a._v("libqt5x11extras5-dev")]),a._v(" ("),e("code",[a._v("qt5-x11extras")]),a._v(" on distros based on Arch Linux)")])]),a._v(" "),e("h2",{attrs:{id:"building-under-linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#building-under-linux"}},[a._v("#")]),a._v(" Building Under Linux")]),a._v(" "),e("p",[a._v("In order to build this program, open a terminal and cd into the antimicrox\ndirectory. Enter the following commands in order to build the program:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" antimicrox\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" build "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" build\ncmake "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n")])])]),e("p",[a._v("or")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" antimicrox\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" build "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" build\ncmake --build "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" cmake --install "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),e("h3",{attrs:{id:"build-options-for-cmake"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-options-for-cmake"}},[a._v("#")]),a._v(" Build Options for CMake")]),a._v(" "),e("p",[a._v("There are a few application specific options that can be used when running\ncmake to build antimicrox. The following file will attempt to list some of those\noptions and describe their use in the project.")]),a._v(" "),e("h3",{attrs:{id:"universal-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#universal-options"}},[a._v("#")]),a._v(" Universal Options")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("-DUPDATE_TRANSLATIONS\n")])])]),e("p",[a._v("Default: OFF. Set updateqm target to call lupdate in order to update\ntranslation files from source.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("-DTRANS_KEEP_OBSOLETE\n")])])]),e("p",[a._v("Default: OFF. Do not specify -noobsolete option when calling lupdate\ncommand for qm files. -noobsolete is a method for getting rid of obsolete text entries")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("-DWITH_TESTS\n")])])]),e("p",[a._v("Default: OFF. Allows for the launch of test sources with unit tests")]),a._v(" "),e("h3",{attrs:{id:"linux-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-options"}},[a._v("#")]),a._v(" Linux Options")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("-DAPPDATA\n")])])]),e("p",[a._v("Default: ON. Build the project with AppData support.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("-DWITH_UINPUT\n")])])]),e("p",[a._v("Default: ON. Compile the program with uinput support.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("-DWITH_X11\n")])])]),e("p",[a._v("Default: ON. Compile the program with X11 support.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("-DWITH_XTEST\n")])])]),e("p",[a._v("Default: ON. Compile the program with XTest support.")]),a._v(" "),e("h2",{attrs:{id:"building-deb-package"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#building-deb-package"}},[a._v("#")]),a._v(" Building deb package")]),a._v(" "),e("p",[a._v("Already built .deb files are available on "),e("a",{attrs:{href:"https://github.com/AntiMicroX/antimicrox/releases",target:"_blank",rel:"noopener noreferrer"}},[a._v("Release Page"),e("OutboundLink")],1)]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" antimicrox\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" build "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" build\ncmake "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(" -DCPACK_GENERATOR"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"DEB"')]),a._v("\ncmake --build "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" --target package\n")])])]),e("h2",{attrs:{id:"building-appimage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#building-appimage"}},[a._v("#")]),a._v(" Building AppImage")]),a._v(" "),e("p",[a._v("Create build directory")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" build "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ./build\n")])])]),e("p",[a._v("Download tools used for creating appimages (and make them executable)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" https://github.com/linuxdeploy/linuxdeploy/releases/downloacontinuous/linuxdeploy-x86_64.AppImage\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" https://github.com/AppImage/AppImageKit/releases/downloacontinuous/appimagetool-x86_64.AppImage\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releasedownload/continuous/linuxdeploy-plugin-qt-x86_64.AppImage\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x linuxdeploy-x86_64.AppImage\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x appimagetool-x86_64.AppImage\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x linuxdeploy-plugin-qt-x86_64.AppImage\n")])])]),e("p",[a._v("Build antimicrox and install it in AppDir directory")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("cmake "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(" -DCMAKE_INSTALL_PREFIX"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/usr\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("DESTDIR")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("AppDir\n")])])]),e("p",[a._v("Create AppImage file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt\n./appimagetool-x86_64.AppImage AppDir/ --no-appstream\n")])])]),e("h2",{attrs:{id:"building-flatpak"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#building-flatpak"}},[a._v("#")]),a._v(" Building Flatpak")]),a._v(" "),e("p",[a._v("The command builds the package into the "),e("code",[a._v("build")]),a._v(" folder and installs the created flatpak.\nThe Flathub manifest can be located in "),e("a",{attrs:{href:"https://github.com/flathub/io.github.antimicrox.antimicrox",target:"_blank",rel:"noopener noreferrer"}},[a._v("Flathub's Github repo"),e("OutboundLink")],1),a._v(".")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("flatpak "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" flathub org.kde.Platform//5.11 org.kde.Sdk//5.11\nflatpak-builder --user --install build/ other/io.github.antimicrox.antimicrox.yml --force-clean\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);